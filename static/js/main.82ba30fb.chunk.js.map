{"version":3,"sources":["services/post.js","components/Icons/Hearts.js","components/Icons/Comment.js","components/PostPage/Styled.js","components/PostPage/index.js","App.js","serviceWorker.js","index.js"],"names":["fetchPost","fetch","then","post","json","Heart","_ref","onClick","active","size","style","react_default","a","createElement","Object","objectSpread","width","height","cursor","viewBox","fill","d","defaultProps","Comment","Post","styled","div","withConfig","displayName","componentId","TitleBar","Avatar","img","UserName","Image","Buttons","section","LikeCount","Comments","User","Message","span","PostedAt","CommentBox","TypeComment","textarea","attrs","placeholder","SubmitComment","button","Like","props","Hearts","assign","marginRight","CommentIcon","position","right","PostPage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","setState","loading","handleLikeComment","i","comments","state","update","merge","like","handelLikePost","handlePostComment","message","commentRef","current","value","prepend","user","handleFocusComment","focus","React","createRef","_this2","_this$state","avatar_url","image_url","username","posted_at","likes","src","map","x","key","moment","utc","fromNow","ref","Component","App","components_PostPage","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82ba30fb.chunk.js","sourcesContent":["export const fetchPost = () => fetch(`/post.json`).then(post => post.json());\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Heart = ({ onClick, active, size, style }) => (\n  <svg\n    style={{ width: size, height: size, cursor: \"pointer\", ...style }}\n    viewBox=\"0 0 24 24\"\n    onClick={onClick}\n  >\n    {active ? (\n      <path\n        fill=\"#ed4956\"\n        d=\"M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z\"\n      />\n    ) : (\n      <path\n        fill=\"#757575\"\n        d=\"M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z\"\n      />\n    )}\n  </svg>\n);\n\nHeart.propTypes = {\n  active: PropTypes.bool.isRequired,\n  size: PropTypes.string.isRequired,\n  style: PropTypes.object,\n  onClick: PropTypes.func\n};\n\nHeart.defaultProps = {\n  active: false,\n  size: \"24px\"\n};\n\nexport default Heart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Comment = ({ onClick, size }) => (\n  <svg\n    style={{ width: size, height: size, cursor: \"pointer\" }}\n    viewBox=\"0 0 24 24\"\n    onClick={onClick}\n  >\n    <path\n      fill=\"#757575\"\n      d=\"M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10Z\"\n    />\n  </svg>\n);\n\nComment.propTypes = {\n  size: PropTypes.string.isRequired,\n  onClick: PropTypes.func\n};\n\nComment.defaultProps = {\n  size: \"24px\"\n};\n\nexport default Comment;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport Hearts from \"components/Icons/Hearts\";\nimport CommentIcon from \"components/Icons/Comment\";\n\nconst Post = styled.div``;\n\nconst TitleBar = styled.div`\n  background-color: #fff;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n  top: 0;\n  width: 100%;\n  height: 52px;\n  padding: 8px;\n  line-height: 52px;\n\n  > div {\n    display: inline-block;\n    vertical-align: top;\n  }\n`;\n\nconst Avatar = styled.img`\n  height: 38px;\n  width: 38px;\n  border-radius: 50%;\n  padding: 2px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n`;\n\nconst UserName = styled.div`\n  line-height: 40px;\n  padding-left: 10px;\n`;\n\nconst Image = styled.img`\n  margin: 0 auto;\n  width: 100%;\n  display: block;\n`;\n\nconst Buttons = styled.section`\n  padding: 10px 16px;\n`;\n\nconst LikeIcon = props => <Hearts {...props} style={{ marginRight: \"10px\" }} />;\n\nconst LikeCount = styled.div`\n  padding: 0px 16px;\n  color: #262626;\n  font-weight: 600;\n  font-size: 14px;\n`;\n\nconst Comments = styled.div`\n  padding: 0px 40px 0 16px;\n`;\n\nconst Comment = styled.div`\n  margin-top: 10px;\n\n  > div {\n    display: inline-block;\n  }\n`;\n\nconst User = styled.div`\n  padding-right: 6px;\n  color: #262626;\n  font-weight: 600;\n  font-size: 14px;\n`;\n\nconst Message = styled.span`\n  font-size: 14px;\n  font-weight: 400;\n`;\n\nconst CommentLike = props => (\n  <Hearts\n    {...props}\n    size=\"14px\"\n    style={{ position: \"absolute\", right: \"10px\" }}\n  />\n);\n\nconst PostedAt = styled.div`\n  padding: 10px 16px;\n  font-size: 12px;\n  color: #999;\n  text-transform: uppercase;\n`;\n\nconst CommentBox = styled.div`\n  padding: 10px 16px;\n  border-top: 1px solid #efefef;\n`;\n\nconst TypeComment = styled.textarea.attrs({\n  placeholder: \"Add a comment...\"\n})`\n  vertical-align: top;\n  width: 85%;\n  height: 40px;\n  border: none;\n  outline: none;\n  resize: none;\n`;\n\nconst SubmitComment = styled.button`\n  vertical-align: top;\n  width: 15%;\n  background: #fff;\n  color: #3897f0;\n  height: 40px;\n  border: none;\n  outline: none;\n`;\n\nPost.TitleBar = TitleBar;\nPost.Avatar = Avatar;\nPost.UserName = UserName;\nPost.Image = Image;\nPost.Buttons = Buttons;\nButtons.Like = LikeIcon;\nButtons.Comment = CommentIcon;\nPost.LikeCount = LikeCount;\nPost.Comments = Comments;\nPost.Comment = Comment;\nPost.Comment.User = User;\nPost.Comment.Message = Message;\nPost.Comment.Like = CommentLike;\nPost.PostedAt = PostedAt;\nPost.CommentBox = CommentBox;\nPost.TypeComment = TypeComment;\nPost.SubmitComment = SubmitComment;\n\nexport { Post };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport update from \"ramda/src/update\";\nimport merge from \"ramda/src/merge\";\nimport prepend from \"ramda/src/prepend\";\nimport { fetchPost } from \"services/post\";\nimport { Post } from \"./Styled\";\n\nclass PostPage extends Component {\n  constructor(props) {\n    super(props);\n    this.commentRef = React.createRef();\n    this.state = { loading: true };\n  }\n\n  componentDidMount = () => {\n    fetchPost().then(post => {\n      this.setState({ ...post, loading: false });\n    });\n  };\n\n  handleLikeComment = i => {\n    const { comments } = this.state;\n    this.setState({\n      comments: update(\n        i,\n        merge(comments[i], { like: !comments[i].like }),\n        comments\n      )\n    });\n  };\n\n  handelLikePost = () => {\n    this.setState({ like: !this.state.like });\n  };\n\n  handlePostComment = () => {\n    const { comments } = this.state;\n    const message = this.commentRef.current.value;\n    this.setState({\n      comments: prepend({ user: \"anonymous\", message, like: false }, comments)\n    });\n    this.commentRef.current.value = \"\";\n  };\n\n  handleFocusComment = () => {\n    this.commentRef.current.focus();\n  };\n\n  render() {\n    const {\n      loading,\n      avatar_url,\n      image_url,\n      username,\n      posted_at,\n      like,\n      likes,\n      comments\n    } = this.state;\n    return (\n      !loading && (\n        <Post>\n          <Post.TitleBar>\n            <Post.Avatar src={avatar_url} />\n            <Post.UserName>{username}</Post.UserName>\n          </Post.TitleBar>\n          <Post.Image src={image_url} />\n          <Post.Buttons>\n            <Post.Buttons.Like active={like} onClick={this.handelLikePost} />\n            <Post.Buttons.Comment onClick={this.handleFocusComment} />\n          </Post.Buttons>\n          <Post.LikeCount>{likes + (like ? 1 : 0)} likes</Post.LikeCount>\n          <Post.Comments>\n            {comments.map((x, i) => (\n              <Post.Comment key={i}>\n                <Post.Comment.User>{x.user}</Post.Comment.User>\n                <Post.Comment.Message>{x.message}</Post.Comment.Message>\n                <Post.Comment.Like\n                  active={x.like}\n                  onClick={() => this.handleLikeComment(i)}\n                />\n              </Post.Comment>\n            ))}\n          </Post.Comments>\n          <Post.PostedAt>{moment.utc(posted_at).fromNow()}</Post.PostedAt>\n          <Post.CommentBox>\n            <Post.TypeComment ref={this.commentRef} />\n            <Post.SubmitComment onClick={this.handlePostComment}>\n              POST\n            </Post.SubmitComment>\n          </Post.CommentBox>\n        </Post>\n      )\n    );\n  }\n}\n\nPostPage.propTypes = {\n  id: PropTypes.number\n};\n\nexport default PostPage;\n","import React, { Component } from \"react\";\nimport PostPage from \"./components/PostPage\";\n\nclass App extends Component {\n  render() {\n    return <PostPage id={1} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}